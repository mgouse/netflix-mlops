# ===================================================================================
# PHASE 5, 6, 8: Complete CI/CD Pipeline for Netflix MLOps Project
# PURPOSE: This workflow automates testing, building, and deploying the application.
# ===================================================================================

name: Main CI/CD Pipeline

# --- TRIGGERS ---
# This workflow runs on:
# 1. Any push to the 'main' branch.
# 2. Any pull request targeting the 'main' branch.
# 3. Manual trigger from the GitHub Actions UI.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/netflix-api # Docker Hub image name

# --- JOBS ---
jobs:
  # ===============================================================
  # JOB 1: LINT & FORMAT CHECK (Code Quality)
  # Purpose: Ensure code is clean and follows style guides.
  # ===============================================================
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
    
    - name: Check formatting with Black
      run: black --check src/ tests/
      continue-on-error: true # Don't fail the whole pipeline for formatting

    - name: Lint with Flake8
      run: flake8 src/ tests/ --max-line-length=88
      continue-on-error: true # Don't fail for linting errors

  # ===============================================================
  # JOB 2: UNIT & INTEGRATION TESTS
  # Purpose: Verify the application logic is correct.
  # Depends on: Lint job
  # ===============================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt # Use the main requirements file
    
    - name: Run unit tests
      run: pytest tests/

  # ===============================================================
  # JOB 3: BUILD & PUSH DOCKER IMAGE
  # Purpose: Create a containerized version of the application.
  # Depends on: Test job
  # ===============================================================
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only push on merge to main
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Build and push image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Only push to registry if it's a merge to main
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===============================================================
  # JOB 4: VALIDATE KUBERNETES MANIFESTS
  # Purpose: Ensure Kubernetes YAML files are syntactically correct.
  # Runs in parallel with other jobs.
  # ===============================================================
  validate-k8s:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate YAML files
      run: |
        pip install pyyaml
        for file in kubernetes/manifests/*.yaml; do
          echo "Validating $file"
          python -c "
          import yaml, sys
          try:
              with open('$file', 'r') as f:
                  list(yaml.safe_load_all(f))
              print('âœ“ $file is valid YAML')
          except Exception as e:
              print(f'Error in $file: {e}', file=sys.stderr)
              sys.exit(1)
          "
        done
        echo "All Kubernetes YAML files are valid!"

  # ===============================================================
  # JOB 5: TRIGGER ARGO WORKFLOW (CD Part)
  # Purpose: Kick off the ML retraining pipeline.
  # Depends on: build-and-push job
  # Runs only on a push to the main branch.
  # ===============================================================
  trigger-argo:
    name: Trigger Argo ML Pipeline
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only run on merge to main
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Simulate Triggering Argo Workflow
      run: |
        echo "âœ… CI/CD pipeline completed successfully!"
        echo "Image pushed to Docker Hub: ${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "--------------------------------------------------------"
        echo "ðŸš€ In a production environment with network access to the cluster,"
        echo "this step would now use the Argo CLI or API to submit the retraining workflow."
        echo "Example command:"
        echo "argo submit --serviceaccount github-actions -n argo pipelines/argo/netflix_ml_pipeline_phase8.yaml"
        echo "--------------------------------------------------------"
        echo "For our local setup, the next step is to manually run the deployment or retraining pipeline on your machine."