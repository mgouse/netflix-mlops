name: Main CI/CD Pipeline  # Name of the GitHub Actions workflow

# Events that trigger the workflow
on:
  push:
    branches: [ main ]       # Trigger on push to main branch
  pull_request:
    branches: [ main ]       # Trigger on PRs to main branch
  workflow_dispatch:         # Allow manual trigger from GitHub UI

# Environment variables available to all jobs
env:
  PYTHON_VERSION: '3.9'      # Python version to be used
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/netflix-api  # Docker image name using GitHub Secrets

# Linting job to ensure code style and formatting
jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest   # Run this job on the latest Ubuntu runner
    steps:
    - name: Checkout code
      uses: actions/checkout@v4  # Clone the repository

    - name: Set up Python
      uses: actions/setup-python@v4  # Install the specified Python version
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black  # Install formatting and linting tools

    - name: Check formatting
      run: black --check src/ tests/  # Check if code is formatted using Black
      continue-on-error: true         # Don’t fail pipeline on formatting errors

    - name: Lint with Flake8
      run: flake8 src/ tests/ --max-line-length=88  # Run static code analysis
      continue-on-error: true                        # Don’t fail pipeline on lint errors

  # Unit test job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint           # Only run after lint job succeeds
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # Install project dependencies

    - name: Run unit tests
      run: pytest tests/  # Run all unit tests in the tests/ folder

  # Build Docker image and push to Docker Hub
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test  # Only run after tests pass
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3  # Enable advanced Docker builds

    - name: Log in to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Use secrets to login
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push image
      uses: docker/build-push-action@v5
      with:
        context: .  # Build context is the root of the repo
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        tags: |
          ${{ env.IMAGE_NAME }}:latest           # Tag for latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }} # Tag with commit SHA
        cache-from: type=gha                      # Use GitHub Actions cache
        cache-to: type=gha,mode=max

  # Validate Kubernetes manifest files
  validate-k8s:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: pip install pyyaml  # Install PyYAML for parsing Kubernetes manifests

    - name: Run validation script
      run: python scripts/ci/validate_k8s_manifests.py  # Custom script to validate YAML

  # Trigger the Argo CD pipeline via webhook
  trigger-argo-webhook:
    name: Trigger Argo via Webhook
    runs-on: ubuntu-latest
    needs: [build-and-push, validate-k8s]  # Wait for Docker and K8s validation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only on push to main
    steps:
    - name: Send Webhook to Local Listener
      env:
        NGROK_URL: ${{ secrets.NGROK_WEBHOOK_URL }}  # Ngrok endpoint (public URL)
        COMMIT_SHA: ${{ github.sha }}                # Commit SHA from GitHub
        REPO_NAME: ${{ github.repository }}          # Repository name
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Event: push" \
          -H "User-Agent: GitHub-Actions" \
          -d '{
            "event": "push",
            "repository": "'"$REPO_NAME"'",
            "ref": "refs/heads/main",
            "commit_sha": "'"$COMMIT_SHA"'",
            "image_name": "'"${{ env.IMAGE_NAME }}"'",
            "image_tag": "'"$COMMIT_SHA"'",
            "triggered_by": "github_actions",
            "workflow_run": {
              "name": "Main CI/CD Pipeline",
              "run_number": "'"$GITHUB_RUN_NUMBER"'",
              "run_id": "'"$GITHUB_RUN_ID"'"
            }
          }' \
          "$NGROK_URL/webhook"  # Send POST to your local Flask listener via Ngrok
